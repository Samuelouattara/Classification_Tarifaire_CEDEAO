// ========================================
// HYBRID-EXTENSION.JS - VERSION L√âG√àRE
// Extension qui s'ajoute √† votre syst√®me existant SANS le remplacer
// ========================================

console.log("üîÑ Chargement de l'extension hybride...");

// üíæ BASE DE DONN√âES √âTENDUE MONDIALE (version compacte)
const WorldDatabase = {
    vehicles: {
        brands: [
            // Marques principales mondiales
            'toyota', 'honda', 'ford', 'volkswagen', 'bmw', 'mercedes', 'audi', 'peugeot', 'renault', 'citro√´n',
            'nissan', 'hyundai', 'kia', 'mazda', 'subaru', 'mitsubishi', 'lexus', 'infiniti', 'acura', 'jaguar',
            'land rover', 'range rover', 'bentley', 'rolls royce', 'ferrari', 'lamborghini', 'porsche', 'maserati',
            'alfa romeo', 'fiat', 'skoda', 'seat', 'volvo', 'saab', 'opel', 'chevrolet', 'cadillac', 'buick',
            'chrysler', 'dodge', 'jeep', 'tesla', 'lucid', 'rivian', 'byd', 'geely', 'chery', 'gac',
            'lotus', 'mclaren', 'koenigsegg', 'bugatti', 'pagani', 'aston martin', 'morgan', 'tvr', 'caterham',
            'yamaha', 'kawasaki', 'suzuki', 'ducati', 'harley davidson', 'ktm', 'triumph',
            'boeing', 'airbus', 'bombardier', 'embraer', 'cessna', 'piper', 'beechcraft', 'gulfstream',
            'beneteau', 'jeanneau', 'sea ray', 'sunseeker', 'azimut'
        ],
        types: [
            'voiture', 'automobile', 'auto', 'car', 'v√©hicule', 'camion', 'truck', 'moto', 'motocyclette', 'scooter',
            'avion', 'a√©ronef', 'jet', 'h√©licopt√®re', 'bateau', 'navire', 'yacht', 'voilier', '4x4', 'suv',
            'berline', 'break', 'coup√©', 'cabriolet', 'utilitaire', 'fourgon', 'bus', 'autobus'
        ]
    },
    animals: {
        mammals: [
            'lion', 'tigre', '√©l√©phant', 'girafe', 'z√®bre', 'hippopotame', 'rhinoc√©ros', 'l√©opard', 'gu√©pard',
            'gorille', 'chimpanz√©', 'orang-outan', 'panda', 'kangourou', 'koala', 'ours', 'loup', 'renard',
            'cerf', 'sanglier', 'antilope', 'gazelle', 'buffle', 'yak', 'bison', 'wapiti', 'orignal'
        ],
        domestic: [
            'chien', 'chat', 'cheval', 'vache', 'porc', 'mouton', 'ch√®vre', 'poule', 'canard', 'oie', 'lapin'
        ],
        fish: [
            'saumon', 'thon', 'sardine', 'maquereau', 'truite', 'carpe', 'brochet', 'bar', 'sole', 'turbot',
            'daurade', 'cabillaud', 'morue', 'colin', 'merlan', 'lieu', 'lotte', 'requin', 'raie'
        ],
        seafood: [
            'crevette', 'homard', 'crabe', 'langoustine', 'hu√Ætre', 'moule', 'coquille saint-jacques', 'calamar', 'seiche', 'poulpe'
        ]
    },
    plants: {
        fruits: [
            'orange', 'citron', 'pamplemousse', 'mandarine', 'pomme', 'poire', 'banane', 'ananas', 'mangue',
            'papaye', 'avocat', 'kiwi', 'fraise', 'framboise', 'cerise', 'p√™che', 'abricot', 'prune',
            'melon', 'past√®que', 'raisin', 'figue', 'datte', 'noix', 'amande', 'pistache'
        ],
        vegetables: [
            'tomate', 'carotte', 'pomme de terre', 'oignon', 'ail', 'poivron', 'aubergine', 'courgette',
            'concombre', 'salade', '√©pinard', 'haricot', 'petit pois', 'chou', 'brocoli', 'chou-fleur'
        ],
        cereals: [
            'riz', 'bl√©', 'ma√Øs', 'orge', 'avoine', 'seigle', 'millet', 'quinoa', 'sarrasin'
        ],
        others: [
            'caf√©', 'th√©', 'cacao', 'vanille', 'cannelle', 'poivre', 'basilic', 'thym', 'romarin'
        ]
    },
    electronics: {
        brands: [
            'apple', 'samsung', 'huawei', 'xiaomi', 'sony', 'lg', 'panasonic', 'dell', 'hp', 'lenovo', 'asus'
        ],
        devices: [
            'iphone', 'smartphone', 't√©l√©phone', 'ordinateur', 'laptop', 'tablette', 'ipad',
            't√©l√©vision', 'tv', 'console', 'playstation', 'xbox', 'nintendo'
        ]
    }
};

// üîç FONCTION PRINCIPALE D'AM√âLIORATION
function enhanceClassification(description) {
    if (!description || description.trim().length === 0) {
        return null;
    }
    
    const descLower = description.toLowerCase().trim();
    
    // 1. V√©rifier les v√©hicules
    for (const brand of WorldDatabase.vehicles.brands) {
        if (descLower.includes(brand)) {
            return {
                section: "Section XVII",
                title: "Mat√©riel de transport",
                confidence: 90,
                matchedTerm: brand,
                reason: `Marque de v√©hicule d√©tect√©e: ${brand}`,
                source: 'hybrid'
            };
        }
    }
    
    for (const type of WorldDatabase.vehicles.types) {
        if (descLower.includes(type)) {
            return {
                section: "Section XVII",
                title: "Mat√©riel de transport",
                confidence: 85,
                matchedTerm: type,
                reason: `Type de v√©hicule d√©tect√©: ${type}`,
                source: 'hybrid'
            };
        }
    }
    
    // 2. V√©rifier les animaux
    const animalCategories = Object.values(WorldDatabase.animals).flat();
    for (const animal of animalCategories) {
        if (descLower.includes(animal)) {
            return {
                section: "Section I",
                title: "Animaux vivants et produits du r√®gne animal",
                confidence: 88,
                matchedTerm: animal,
                reason: `Animal d√©tect√©: ${animal}`,
                source: 'hybrid'
            };
        }
    }
    
    // 3. V√©rifier les plantes
    const plantCategories = Object.values(WorldDatabase.plants).flat();
    for (const plant of plantCategories) {
        if (descLower.includes(plant)) {
            return {
                section: "Section II",
                title: "Produits du r√®gne v√©g√©tal",
                confidence: 85,
                matchedTerm: plant,
                reason: `V√©g√©tal d√©tect√©: ${plant}`,
                source: 'hybrid'
            };
        }
    }
    
    // 4. V√©rifier l'√©lectronique
    const electronicItems = [...WorldDatabase.electronics.brands, ...WorldDatabase.electronics.devices];
    for (const item of electronicItems) {
        if (descLower.includes(item)) {
            return {
                section: "Section XVI",
                title: "Machines et appareils √©lectriques",
                confidence: 80,
                matchedTerm: item,
                reason: `Produit √©lectronique d√©tect√©: ${item}`,
                source: 'hybrid'
            };
        }
    }
    
    return null;
}

// üîÑ AM√âLIORATION DE LA FONCTION EXISTANTE
// Sauvegarde de la fonction originale
const originalClassifyProduct = window.classifyProduct;

// Nouvelle fonction am√©lior√©e
function enhancedClassifyProduct(description) {
    console.log(`üîç Classification hybride pour: "${description}"`);
    
    // 1. D'abord, essayer notre am√©lioration
    const hybridResult = enhanceClassification(description);
    
    if (hybridResult) {
        console.log(`‚úÖ Trouv√© par l'extension hybride: ${hybridResult.section}`);
        
        // Formatter le r√©sultat pour correspondre √† votre syst√®me
        return [{
            section: {
                number: hybridResult.section.replace('Section ', ''),
                title: hybridResult.title
            },
            confidence: hybridResult.confidence,
            matchedKeywords: [hybridResult.matchedTerm],
            score: hybridResult.confidence
        }];
    }
    
    // 2. Si pas trouv√©, utiliser votre syst√®me original
    if (originalClassifyProduct && typeof originalClassifyProduct === 'function') {
        console.log("üîÑ Utilisation du syst√®me original...");
        return originalClassifyProduct(description);
    }
    
    // 3. Fallback basique si rien ne marche
    return [];
}

// üéØ AM√âLIORATION DE LA FONCTION D'AFFICHAGE
const originalDisplayResults = window.displayResults;

function enhancedDisplayResults(results) {
    // Ajouter des informations sur la source
    if (results && results.length > 0) {
        results.forEach(result => {
            if (!result.source) {
                result.source = 'original';
            }
        });
    }
    
    // Utiliser votre fonction d'affichage originale
    if (originalDisplayResults && typeof originalDisplayResults === 'function') {
        return originalDisplayResults(results);
    }
}

// üöÄ FONCTION DE TEST RAPIDE
function testHybridSystem() {
    console.log("=== TESTS DU SYST√àME HYBRIDE ===");
    
    const testCases = [
        "lion",
        "toyota",
        "range rover", 
        "orange",
        "lamborghini",
        "saumon",
        "iphone",
        "4x4"
    ];
    
    testCases.forEach(testCase => {
        const result = enhanceClassification(testCase);
        if (result) {
            console.log(`‚úÖ "${testCase}" ‚Üí ${result.section}: ${result.title} (${result.confidence}%)`);
        } else {
            console.log(`‚ùå "${testCase}" ‚Üí Non trouv√© par l'extension`);
        }
    });
}

// üîó INT√âGRATION DOUCE AVEC VOTRE SYST√àME EXISTANT
// Attendre que votre syst√®me soit charg√©
setTimeout(() => {
    if (typeof window !== 'undefined') {
        // Sauvegarder les originales SEULEMENT si elles existent
        if (window.classifyProduct) {
            window._originalClassifyProduct = window.classifyProduct;
            console.log("‚úÖ Fonction classifyProduct sauvegard√©e");
        }
        
        if (window.displayResults) {
            window._originalDisplayResults = window.displayResults;
            console.log("‚úÖ Fonction displayResults sauvegard√©e");
        }
        
        // Installer les nouvelles versions SEULEMENT si les originales existent
        if (window.classifyProduct) {
            window.classifyProduct = enhancedClassifyProduct;
            console.log("‚úÖ Fonction classifyProduct am√©lior√©e");
        }
        
        if (window.displayResults) {
            window.displayResults = enhancedDisplayResults;
            console.log("‚úÖ Fonction displayResults am√©lior√©e");
        }
        
        // Fonction de test disponible globalement
        window.testHybridSystem = testHybridSystem;
        
        console.log("‚úÖ Extension hybride install√©e avec succ√®s !");
        console.log("üß™ Tapez 'testHybridSystem()' dans la console pour tester");
    }
}, 2000); // Attendre 2 secondes que votre syst√®me se charge

// üéâ NOTIFICATION DE CHARGEMENT
setTimeout(() => {
    if (window.location.search.includes('debug=1')) {
        testHybridSystem();
    }
}, 3000);

console.log("üì¶ Extension hybride charg√©e - Pr√™te √† am√©liorer vos classifications !");